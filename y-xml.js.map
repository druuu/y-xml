{"version":3,"file":"y-xml.js","sources":["node_modules/fast-diff/diff.js","src/y-xml-text.js","src/utils.js","src/y-xml-fragment.js","src/y-xml-element.js","src/y-xml.js"],"sourcesContent":["/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int} cursor_pos Expected edit position in text1 (optional)\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos) {\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  // Check cursor_pos within bounds\n  if (cursor_pos < 0 || text1.length < cursor_pos) {\n    cursor_pos = null;\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs);\n  if (cursor_pos != null) {\n    diffs = fix_cursor(diffs, cursor_pos);\n  }\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i),\n                                           shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i),\n                                           shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n */\nfunction diff_cleanupMerge(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n};\n\n\nvar diff = diff_main;\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n\n/*\n * Modify a diff such that the cursor position points to the start of a change:\n * E.g.\n *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)\n *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]\n *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)\n *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} A tuple [cursor location in the modified diff, modified diff]\n */\nfunction cursor_normalize_diff (diffs, cursor_pos) {\n  if (cursor_pos === 0) {\n    return [DIFF_EQUAL, diffs];\n  }\n  for (var current_pos = 0, i = 0; i < diffs.length; i++) {\n    var d = diffs[i];\n    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {\n      var next_pos = current_pos + d[1].length;\n      if (cursor_pos === next_pos) {\n        return [i + 1, diffs];\n      } else if (cursor_pos < next_pos) {\n        // copy to prevent side effects\n        diffs = diffs.slice();\n        // split d into two diff changes\n        var split_pos = cursor_pos - current_pos;\n        var d_left = [d[0], d[1].slice(0, split_pos)];\n        var d_right = [d[0], d[1].slice(split_pos)];\n        diffs.splice(i, 1, d_left, d_right);\n        return [i + 1, diffs];\n      } else {\n        current_pos = next_pos;\n      }\n    }\n  }\n  throw new Error('cursor_pos is out of bounds!')\n}\n\n/*\n * Modify a diff such that the edit position is \"shifted\" to the proposed edit location (cursor_position).\n *\n * Case 1)\n *   Check if a naive shift is possible:\n *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)\n *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result\n * Case 2)\n *   Check if the following shifts are possible:\n *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']\n *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']\n *         ^            ^\n *         d          d_next\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} Array of diff tuples\n */\nfunction fix_cursor (diffs, cursor_pos) {\n  var norm = cursor_normalize_diff(diffs, cursor_pos);\n  var ndiffs = norm[1];\n  var cursor_pointer = norm[0];\n  var d = ndiffs[cursor_pointer];\n  var d_next = ndiffs[cursor_pointer + 1];\n\n  if (d == null) {\n    // Text was deleted from end of original string,\n    // cursor is now out of bounds in new string\n    return diffs;\n  } else if (d[0] !== DIFF_EQUAL) {\n    // A modification happened at the cursor location.\n    // This is the expected outcome, so we can return the original diff.\n    return diffs;\n  } else {\n    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {\n      // Case 1)\n      // It is possible to perform a naive shift\n      ndiffs.splice(cursor_pointer, 2, d_next, d)\n      return merge_tuples(ndiffs, cursor_pointer, 2)\n    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {\n      // Case 2)\n      // d[1] is a prefix of d_next[1]\n      // We can assume that d_next[0] !== 0, since d[0] === 0\n      // Shift edit locations..\n      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);\n      var suffix = d_next[1].slice(d[1].length);\n      if (suffix.length > 0) {\n        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);\n      }\n      return merge_tuples(ndiffs, cursor_pointer, 3)\n    } else {\n      // Not possible to perform any modification\n      return diffs;\n    }\n  }\n\n}\n\n/*\n * Try to merge tuples with their neigbors in a given range.\n * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']\n *\n * @param {Array} diffs Array of diff tuples.\n * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).\n * @param {Int} length Number of consecutive elements to check.\n * @return {Array} Array of merged diff tuples.\n */\nfunction merge_tuples (diffs, start, length) {\n  // Check from (start-1) to (start+length).\n  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {\n    if (i + 1 < diffs.length) {\n      var left_d = diffs[i];\n      var right_d = diffs[i+1];\n      if (left_d[0] === right_d[1]) {\n        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);\n      }\n    }\n  }\n  return diffs;\n}\n","/* global getSelection */\n\nimport diff from 'fast-diff'\n\nfunction fixPosition (event, pos) {\n  if (event.index <= pos) {\n    if (event.type === 'delete') {\n      return pos - Math.min(pos - event.index, event.length)\n    } else {\n      return pos + 1\n    }\n  } else {\n    return pos\n  }\n}\n\nexport default function extendYXmlText (Y, _document, _MutationObserver) {\n  Y.requestModules(['Array']).then(function () {\n    class YXmlText extends Y.Array.typeDefinition['class'] {\n      constructor (os, _model, _content, args) {\n        super(os, _model, _content)\n        if (args != null && args.content != null && _model[0] !== '_') {\n          this.insert(0, args.content)\n        }\n        this.dom = null\n        this._domObserver = null\n        this._domObserverListener = null\n        if (args != null && args.dom != null) {\n          this._setDom(args.dom)\n        }\n        var token = true\n        this._mutualExcluse = f => {\n          // take and process current records\n          var records = this._domObserver.takeRecords()\n          if (records.length > 0) {\n            throw new Error('These changes should have been collected before!')\n          }\n          if (token) {\n            token = false\n            try {\n              f()\n            } catch (e) {\n              // discard created records\n              this._domObserver.takeRecords()\n              token = true\n              throw e\n            }\n            this._domObserver.takeRecords()\n            token = true\n          }\n        }\n        this.observe(event => {\n          if (this.dom != null) {\n            this._mutualExcluse(() => {\n              let selection = null\n              let shouldUpdateSelection = false\n              let anchorNode = null\n              let anchorOffset = null\n              let focusNode = null\n              let focusOffset = null\n              if (typeof getSelection !== 'undefined') {\n                selection = getSelection()\n                if (selection.anchorNode === this.dom) {\n                  anchorNode = selection.anchorNode\n                  anchorOffset = fixPosition(event, selection.anchorOffset)\n                  shouldUpdateSelection = true\n                }\n                if (selection.focusNode === this.dom) {\n                  focusNode = selection.focusNode\n                  focusOffset = fixPosition(event, selection.focusOffset)\n                  shouldUpdateSelection = true\n                }\n              }\n              this.dom.nodeValue = this.toString()\n              if (shouldUpdateSelection) {\n                selection.setBaseAndExtent(\n                  anchorNode || selection.anchorNode,\n                  anchorOffset || selection.anchorOffset,\n                  focusNode || selection.focusNode,\n                  focusOffset || selection.focusOffset\n                )\n              }\n            })\n          }\n        })\n      }\n\n      _setDom (dom) {\n        if (this.dom != null) {\n          this._unbindFromDom()\n        }\n        if (dom.__yxml != null) {\n          dom.__yxml._unbindFromDom()\n        }\n        if (_MutationObserver == null) {\n          return\n        }\n        this.dom = dom\n        dom.__yxml = this\n        this._domObserverListener = () => {\n          this._mutualExcluse(() => {\n            var diffs = diff(this.toString(), this.dom.nodeValue)\n            var pos = 0\n            for (var i = 0; i < diffs.length; i++) {\n              var d = diffs[i]\n              if (d[0] === 0) { // EQUAL\n                pos += d[1].length\n              } else if (d[0] === -1) { // DELETE\n                this.delete(pos, d[1].length)\n              } else { // INSERT\n                this.insert(pos, d[1])\n                pos += d[1].length\n              }\n            }\n          })\n        }\n        this._domObserver = new _MutationObserver(this._domObserverListener)\n        this._domObserver.observe(this.dom, { characterData: true })\n      }\n\n      getDom () {\n        if (this.dom == null) {\n          let dom = _document.createTextNode(this.toString())\n          if (_MutationObserver !== null) {\n            this._setDom(dom)\n          }\n          return dom\n        } else {\n          return this.dom\n        }\n      }\n\n      toString () {\n        return this._content.map(function (c) {\n          return c.val\n        }).join('')\n      }\n\n      insert (pos, content) {\n        super.insert(pos, content.split(''))\n      }\n\n      _changed (transaction, op) {\n        if (this._domObserver != null) {\n          this._domObserverListener(this._domObserver.takeRecords())\n        }\n        super._changed(transaction, op)\n      }\n\n      _unbindFromDom () {\n        if (this._domObserver != null) {\n          this._domObserver.disconnect()\n          this._domObserver = null\n        }\n        if (this.dom != null) {\n          this.dom.__yxml = null\n          this.dom = null\n        }\n      }\n\n      _destroy () {\n        if (this._eventListenerHandler != null) {\n          this._eventListenerHandler.destroy()\n        }\n        this._unbindFromDom()\n        super._destroy()\n      }\n    }\n    Y.extend('XmlText', new Y.utils.CustomTypeDefinition({\n      name: 'XmlText',\n      class: YXmlText,\n      struct: 'List',\n      parseArguments: function (arg) {\n        if (typeof arg === 'string') {\n          return [this, { content: arg }]\n        } else if (arg.nodeType === _document.TEXT_NODE) {\n          return [this, { content: arg.nodeValue, dom: arg }]\n        } else {\n          return [this, {}]\n        }\n      },\n      initType: function YXmlTextInitializer (os, model, init) {\n        var _content = []\n        Y.Struct.List.map.call(this, model, function (op) {\n          if (op.hasOwnProperty('opContent')) {\n            throw new Error('Text must not contain types!')\n          } else {\n            op.content.forEach(function (c, i) {\n              _content.push({\n                id: [op.id[0], op.id[1] + i],\n                val: op.content[i]\n              })\n            })\n          }\n        })\n        return new YXmlText(os, model.id, _content, {}, init || {})\n      },\n      createType: function YXmlTextCreator (os, model, args) {\n        return new YXmlText(os, model.id, [], args || {})\n      }\n    }))\n  })\n}\n","\n/*\n * 1. Check if any of the nodes was deleted\n * 2. Iterate over the children.\n *    2.1 If a node exists without __yxml property, insert a new node\n *    2.2 If _contents.length < dom.childNodes.length, fill the\n *        rest of _content with childNodes\n *    2.3 If a node was moved, delete it and\n *       recreate a new yxml element that is bound to that node.\n *       You can detect that a node was moved because expectedId\n *       !== actualId in the list\n */\nexport function applyChangesFromDom (yxml) {\n  let undeletedKnownChildren = Array.prototype.map.call(yxml.dom.childNodes, child => child.__yxml)\n                                    .filter(id => id !== undefined)\n  // 1. Check if any of the nodes was deleted\n  for (let i = yxml._content.length - 1; i >= 0; i--) {\n    let childType = yxml.get(i)\n    if (!undeletedKnownChildren.some(undel => undel === childType)) {\n      yxml.delete(i, 1)\n    }\n  }\n  // 2. iterate\n  let childNodes = yxml.dom.childNodes\n  let len = childNodes.length\n  for (let i = 0; i < len; i++) {\n    let child = childNodes[i]\n    if (child.__yxml != null) {\n      if (i < yxml.length) {\n        let expectedNode = yxml.get(i)\n        if (expectedNode !== child.__yxml) {\n          // 2.3 Not expected node\n          let index = yxml._content.findIndex(c => c.type[0] === child.__yxml._model[0] && c.type[1] === child.__yxml._model[1])\n          if (index < 0) {\n            // element is going to be deleted by its previous parent\n            child.__yxml = null\n          } else {\n            yxml.delete(index, 1)\n          }\n          yxml.insertDomElements(i, [child])\n        }\n        // if this is the expected node id, just continue\n      } else {\n        // 2.2 fill _conten with child nodes\n        yxml.insertDomElements(i, [child])\n      }\n    } else {\n      // 2.1 A new node was found\n      yxml.insertDomElements(i, [child])\n    }\n  }\n}\n","import { applyChangesFromDom } from './utils.js'\n\nexport default function extendYXmlFragment (Y, _document, _MutationObserver) {\n  Y.requestModules(['Array']).then(function () {\n    class YXmlFragment extends Y.Array.typeDefinition['class'] {\n      constructor (os, _model, _content, args) {\n        super(os, _model, _content)\n        this.dom = null\n        this._domObserver = null\n        this._domObserverListener = null\n        var token = true\n        this._mutualExcluse = f => {\n          // take and process current records\n          var records = this._domObserver.takeRecords()\n          if (records.length > 0) {\n            throw new Error('These changes should have been collected before!')\n          }\n          if (token) {\n            token = false\n            try {\n              f()\n            } catch (e) {\n              // discard created records\n              this._domObserver.takeRecords()\n              token = true\n              throw e\n            }\n            this._domObserver.takeRecords()\n            token = true\n          }\n        }\n        this.observe(event => {\n          if (this.dom != null) {\n            this._mutualExcluse(() => {\n              if (event.type === 'insert') {\n                let nodes = event.values.map(v => v.getDom())\n                for (let i = nodes.length - 1; i >= 0; i--) {\n                  let dom = nodes[i]\n                  let nextDom = null\n                  if (this._content.length > event.index + i + 1) {\n                    nextDom = this.get(event.index + i + 1).getDom()\n                  }\n                  this.dom.insertBefore(dom, nextDom)\n                }\n              } else if (event.type === 'delete') {\n                event.values.forEach(function (yxml) {\n                  yxml.dom.remove()\n                })\n              }\n            })\n          }\n        })\n      }\n\n      insertDomElements () {\n        return Y.XmlElement.typeDefinition.class.prototype.insertDomElements.apply(this, arguments)\n      }\n\n      bindToDom (dom) {\n        if (this.dom != null) {\n          this._unbindFromDom()\n        }\n        if (dom.__yxml != null) {\n          dom.__yxml._unbindFromDom()\n        }\n        if (_MutationObserver == null) {\n          throw new Error('Not able to bind to a DOM element, because MutationObserver is not available!')\n        }\n        dom.innerHTML = ''\n        for (let i = 0; i < this._content.length; i++) {\n          dom.insertBefore(this.get(i).getDom(), null)\n        }\n        this.dom = dom\n        dom.__yxml = this\n        this._domObserverListener = () => {\n          this._mutualExcluse(() => applyChangesFromDom(this))\n        }\n        this._domObserver = new _MutationObserver(this._domObserverListener)\n        this._domObserver.takeRecords() // discard made changes\n        this._domObserver.observe(this.dom, { childList: true })\n      }\n\n      toString () {\n        return this._content\n          .map(c => this.os.getType(c.type).toString())\n          .join('')\n      }\n\n      _changed (transaction, op) {\n        if (this._domObserver != null) {\n          this._domObserverListener(this._domObserver.takeRecords())\n        }\n        super._changed(transaction, op)\n      }\n\n      _unbindFromDom () {\n        if (this._domObserver != null) {\n          this._domObserver.disconnect()\n          this._domObserver = null\n        }\n        if (this.dom != null) {\n          this.dom.__yxml = null\n          this.dom = null\n        }\n      }\n\n      _destroy () {\n        if (this._eventListenerHandler != null) {\n          this._eventListenerHandler.destroy()\n        }\n        this._unbindFromDom()\n        super._destroy()\n      }\n    }\n    Y.extend('XmlFragment', new Y.utils.CustomTypeDefinition({\n      name: 'XmlFragment',\n      class: YXmlFragment,\n      struct: 'List',\n      initType: function YXmlFragmentInitializer (os, model) {\n        var _content = []\n        var _types = []\n        Y.Struct.List.map.call(this, model, function (op) {\n          if (op.hasOwnProperty('opContent')) {\n            _content.push({\n              id: op.id,\n              type: op.opContent\n            })\n            _types.push(op.opContent)\n          } else {\n            op.content.forEach(function (c, i) {\n              _content.push({\n                id: [op.id[0], op.id[1] + i],\n                val: op.content[i]\n              })\n            })\n          }\n        })\n        for (var i = 0; i < _types.length; i++) {\n          var type = this.store.initType.call(this, _types[i])\n          type._parent = model.id\n        }\n        return new YXmlFragment(os, model.id, _content)\n      },\n      createType: function YXmlTextCreator (os, model) {\n        return new YXmlFragment(os, model.id, [])\n      }\n    }))\n  })\n}\n","// import diff from 'fast-diff'\nimport { applyChangesFromDom } from './utils.js'\n\nexport default function extendXmlElement (Y, _document, _MutationObserver) {\n  function domToType (dom) {\n    if (dom.nodeType === _document.TEXT_NODE) {\n      return Y.XmlText(dom)\n    } else if (dom.nodeType === _document.ELEMENT_NODE) {\n      return Y.XmlElement(dom)\n    } else {\n      throw new Error('Unsupported node!')\n    }\n  }\n\n  function yarrayEventHandler (op) {\n    if (op.struct === 'Insert') {\n      // when using indexeddb db adapter, the op could already exist (see y-js/y-indexeddb#2)\n      if (this._content.some(function (c) { return Y.utils.compareIds(c.id, op.id) })) {\n        // op exists\n        return\n      }\n      let pos\n      // we check op.left only!,\n      // because op.right might not be defined when this is called\n      if (op.left === null) {\n        pos = 0\n      } else {\n        pos = 1 + this._content.findIndex(function (c) {\n          return Y.utils.compareIds(c.id, op.left)\n        })\n        if (pos <= 0) {\n          throw new Error('Unexpected operation!')\n        }\n      }\n      /*\n      (see above for new approach)\n      var _e = this._content[pos]\n      // when using indexeddb db adapter, the op could already exist (see y-js/y-indexeddb#2)\n      // If the algorithm works correctly, the double should always exist on the correct position (pos - the computed destination)\n      if (_e != null && Y.utils.compareIds(_e.id, op.id)) {\n        // is already defined\n        return\n      }\n      */\n      var values\n      var length\n      if (op.hasOwnProperty('opContent')) {\n        this._content.splice(pos, 0, {\n          id: op.id,\n          type: op.opContent\n        })\n        length = 1\n        let type = this.os.getType(op.opContent)\n        type._parent = this._model\n        values = [type]\n      } else {\n        var contents = op.content.map(function (c, i) {\n          return {\n            id: [op.id[0], op.id[1] + i],\n            val: c\n          }\n        })\n        // insert value in _content\n        // It is not possible to insert more than ~2^16 elements in an Array (see #5). We handle this case explicitly\n        if (contents.length < 30000) {\n          this._content.splice.apply(this._content, [pos, 0].concat(contents))\n        } else {\n          this._content = this._content.slice(0, pos).concat(contents).concat(this._content.slice(pos))\n        }\n        values = op.content\n        length = op.content.length\n      }\n      Y.utils.bubbleEvent(this, {\n        type: 'insert',\n        object: this,\n        index: pos,\n        values: values,\n        length: length\n      })\n    } else if (op.struct === 'Delete') {\n      var i = 0 // current position in _content\n      for (; i < this._content.length && op.length > 0; i++) {\n        var c = this._content[i]\n        if (Y.utils.inDeletionRange(op, c.id)) {\n          // is in deletion range!\n          var delLength\n          // check how many character to delete in one flush\n          for (delLength = 1;\n                delLength < op.length && i + delLength < this._content.length && Y.utils.inDeletionRange(op, this._content[i + delLength].id);\n                delLength++) {}\n          // last operation that will be deleted\n          c = this._content[i + delLength - 1]\n          // update delete operation\n          op.length -= c.id[1] - op.target[1] + 1\n          op.target = [c.id[0], c.id[1] + 1]\n          // apply deletion & find send event\n          let content = this._content.splice(i, delLength)\n          let values = content.map((c) => {\n            if (c.val != null) {\n              return c.val\n            } else {\n              return this.os.getType(c.type)\n            }\n          })\n          Y.utils.bubbleEvent(this, {\n            type: 'delete',\n            object: this,\n            index: i,\n            values: values,\n            _content: content,\n            length: delLength\n          })\n          // with the fresh delete op, we can continue\n          // note: we don't have to increment i, because the i-th content was deleted\n          // but on the other had, the (i+delLength)-th was not in deletion range\n          // So we don't do i--\n        }\n      }\n    } else {\n      throw new Error('Unexpected struct!')\n    }\n  }\n\n  function ymapEventHandler (op) {\n    var oldValue\n    // key is the name to use to access (op)content\n    var key = op.struct === 'Delete' ? op.key : op.parentSub\n    // compute oldValue\n    if (this.opContents[key] != null) {\n      oldValue = this.os.getType(this.opContents[key])\n    } else {\n      oldValue = this.contents[key]\n    }\n    // compute op event\n    if (op.struct === 'Insert') {\n      if (op.left === null && !Y.utils.compareIds(op.id, this.map[key])) {\n        var value\n        // TODO: what if op.deleted??? I partially handles this case here.. but need to send delete event instead. somehow related to #4\n        if (op.opContent != null) {\n          value = this.os.getType(op.opContent)\n          value._parent = this._model\n          delete this.contents[key]\n          if (op.deleted) {\n            delete this.opContents[key]\n          } else {\n            this.opContents[key] = op.opContent\n          }\n        } else {\n          value = op.content[0]\n          delete this.opContents[key]\n          if (op.deleted) {\n            delete this.contents[key]\n          } else {\n            this.contents[key] = op.content[0]\n          }\n        }\n        this.map[key] = op.id\n        if (oldValue === undefined) {\n          Y.utils.bubbleEvent(this, {\n            name: key,\n            object: this,\n            type: 'add',\n            value: value\n          })\n        } else {\n          Y.utils.bubbleEvent(this, {\n            name: key,\n            object: this,\n            oldValue: oldValue,\n            type: 'update',\n            value: value\n          })\n        }\n      }\n    } else if (op.struct === 'Delete') {\n      if (Y.utils.compareIds(this.map[key], op.target)) {\n        delete this.opContents[key]\n        delete this.contents[key]\n        Y.utils.bubbleEvent(this, {\n          name: key,\n          object: this,\n          oldValue: oldValue,\n          type: 'delete'\n        })\n      }\n    } else {\n      throw new Error('Unexpected Operation!')\n    }\n  }\n\n  class YXmlElement extends Y.utils.CustomType {\n    constructor (os, model, arrayContent, contents, opContents, dom) {\n      super()\n      this._os = os\n      this.os = os\n      this._model = model.id\n      this._parent = null\n      // map is the map of attributes (y-map convention)\n      this.map = Y.utils.copyObject(model.map)\n      this.contents = contents\n      this.opContents = opContents\n      // _content is the list of childnotes (y-array convention)\n      this._content = arrayContent\n      this.nodeName = model.nodeName\n      let mapEventHandler = ymapEventHandler.bind(this)\n      let arrayEventHandler = yarrayEventHandler.bind(this)\n      let eventHandler = new Y.utils.EventHandler(function (op) {\n        if (op.parentSub !== undefined || op.key !== undefined) {\n          mapEventHandler(op)\n        } else {\n          arrayEventHandler(op)\n        }\n      })\n      this.eventHandler = eventHandler\n      this._deepEventHandler = new Y.utils.EventListenerHandler()\n      this._eventListenerHandler = eventHandler\n      this._domObserver = null\n      this.dom = null\n      if (dom != null) {\n        this._setDom(dom)\n      }\n      // this function makes sure that either the\n      // dom event is executed, or the yjs observer is executed\n      var token = true\n      this._mutualExclude = f => {\n        // take and process current records\n        var records = this._domObserver.takeRecords()\n        if (records.length > 0) {\n          throw new Error('These changes should have been collected before!')\n        }\n        if (token) {\n          token = false\n          try {\n            f()\n          } catch (e) {\n            // discard created records\n            this._domObserver.takeRecords()\n            token = true\n            throw e\n          }\n          this._domObserver.takeRecords()\n          token = true\n        }\n      }\n      // Apply Y.Xml events to dom\n      this.observe(event => {\n        if (this.dom != null) {\n          this._mutualExclude(() => {\n            if (event.type === 'attributeChanged') {\n              this.dom.setAttribute(event.name, event.value)\n            } else if (event.type === 'attributeRemoved') {\n              this.dom.removeAttribute(event.name)\n            } else if (event.type === 'childInserted') {\n              let nodes = event.nodes\n              for (let i = nodes.length - 1; i >= 0; i--) {\n                let node = nodes[i]\n                let dom = node.getDom()\n                let nextDom = null\n                if (this._content.length > event.index + i + 1) {\n                  nextDom = this.get(event.index + i + 1).getDom()\n                }\n                this.dom.insertBefore(dom, nextDom)\n              }\n            } else if (event.type === 'childRemoved') {\n              event.values.forEach(function (yxml) {\n                yxml.dom.remove()\n              })\n            }\n          })\n        }\n      })\n    }\n\n    get length () {\n      return this._content.length\n    }\n\n    toString () {\n      let nodeName = this.nodeName.toLowerCase()\n      let children = this._content\n        .map(c => this.os.getType(c.type).toString())\n        .join('')\n      if (children.length === 0) {\n        return `<${nodeName}/>`\n      } else {\n        return `<${nodeName}>${children}</${nodeName}>`\n      }\n    }\n\n    _getPathToChild (childId) {\n      return this._content.findIndex(c =>\n        c.type != null && Y.utils.compareIds(c.type, childId)\n      )\n    }\n\n    _unbindFromDom () {\n      if (this._domObserver != null) {\n        this._domObserver.disconnect()\n        this._domObserver = null\n      }\n      if (this.dom != null) {\n        this.dom.__yxml = null\n        this.dom = null\n      }\n    }\n\n    _destroy () {\n      this._unbindFromDom()\n      if (this._eventListenerHandler != null) {\n        this._eventListenerHandler.destroy()\n        this._eventListenerHandler = null\n      }\n      this.nodeName = null\n      // y-array destroy\n      this._content = null\n      // y-map destroy\n      this.contents = null\n      this.opContents = null\n      this.map = null\n    }\n\n    insertDomElements (pos, doms) {\n      doms.forEach(d => {\n        if (d.__yxml != null) {\n          d.__yxml._unbindFromDom()\n        }\n      })\n      let types = doms.map(domToType)\n      this.insert(pos, types)\n    }\n\n    insert (pos, types) {\n      if (!Array.isArray(types)) {\n        throw new Error('Expected an Array of content!')\n      }\n      for (var i = 0; i < types.length; i++) {\n        var v = types[i]\n        var t = Y.utils.isTypeDefinition(v)\n        if (t == null || (t[0].name !== 'XmlElement' && t[0].name !== 'XmlText')) {\n          throw new Error('Expected Y.Xml type or String!')\n        }\n      }\n      Y.Array.typeDefinition.class.prototype.insert.call(this, pos, types)\n    }\n\n    delete () {\n      return Y.Array.typeDefinition.class.prototype.delete.apply(this, arguments)\n    }\n\n    get () {\n      return Y.Array.typeDefinition.class.prototype.get.apply(this, arguments)\n    }\n\n    removeAttribute () {\n      return Y.Map.typeDefinition.class.prototype.delete.apply(this, arguments)\n    }\n\n    setAttribute () {\n      return Y.Map.typeDefinition.class.prototype.set.apply(this, arguments)\n    }\n\n    getAttribute () {\n      return Y.Map.typeDefinition.class.prototype.get.apply(this, arguments)\n    }\n\n    getAttributes () {\n      let keys = Y.Map.typeDefinition.class.prototype.keys.apply(this)\n      let obj = {}\n      keys.forEach(key => {\n        let val = Y.Map.typeDefinition.class.prototype.get.call(this, key)\n        if (val != null) {\n          obj[key] = val\n        }\n      })\n      return obj\n    }\n\n    // binds to a dom element\n    // Only call if dom and YXml are isomorph\n    _bindToDom (dom) {\n      this._domObserverListener = mutations => {\n        this._mutualExclude(() => {\n          let diffChildren = false\n          mutations.forEach(mutation => {\n            if (mutation.type === 'attributes') {\n              var name = mutation.attributeName\n              var val = mutation.target.getAttribute(mutation.attributeName)\n              if (this.getAttribute(name) !== val) {\n                if (val == null) {\n                  this.removeAttribute(name)\n                } else {\n                  this.setAttribute(name, val)\n                }\n              }\n            } else if (mutation.type === 'childList') {\n              diffChildren = true\n            }\n          })\n          if (diffChildren) {\n            applyChangesFromDom(this)\n          }\n        })\n      }\n      this._domObserver = new _MutationObserver(this._domObserverListener)\n      this._domObserver.observe(dom, { attributes: true, childList: true })\n      return dom\n    }\n\n    _setDom (dom) {\n      if (this.dom != null) {\n        throw new Error('Only call this method if you know what you are doing ;)')\n      } else if (dom.__yxml != null) { // TODO do i need to check this? - no.. but for dev purps..\n        throw new Error('Already bound to an YXml type')\n      } else {\n        dom.__yxml = this\n        // tag is already set in constructor\n        // set attributes\n        for (var i = 0; i < dom.attributes.length; i++) {\n          var attr = dom.attributes[i]\n          this.setAttribute(attr.name, attr.value)\n        }\n        this.insert(0, Array.prototype.map.call(dom.childNodes, dom => {\n          if (dom.__yxml != null) {\n            // it is ok to reset here. It was probably moved from another node, and will be removed by that node\n            dom.__yxml._domObserver.disconnect()\n            dom.__yxml = null\n          }\n          return domToType(dom)\n        }))\n        if (_MutationObserver != null) {\n          this.dom = this._bindToDom(dom)\n        }\n        return dom\n      }\n    }\n\n    getDom () {\n      let dom = this.dom\n      if (dom == null) {\n        dom = _document.createElement(this.nodeName)\n        dom.__yxml = this\n        let attrs = this.getAttributes()\n        for (let key in attrs) {\n          dom.setAttribute(key, attrs[key])\n        }\n        for (var i = 0; i < this._content.length; i++) {\n          let c = this._content[i]\n          let type = this.os.getType(c.type)\n          dom.appendChild(type.getDom())\n        }\n        if (_MutationObserver !== null) {\n          this.dom = this._bindToDom(dom)\n        }\n      }\n      return dom\n    }\n\n    observe (f) {\n      function observeWrapper (event) {\n        if (event.type === 'insert') {\n          f({\n            type: 'childInserted',\n            index: event.index,\n            nodes: event.values\n          })\n        } else if (event.type === 'delete') {\n          if (event.index !== undefined) {\n            f({\n              type: 'childRemoved',\n              index: event.index,\n              values: event.values,\n              _content: event._content\n            })\n          } else {\n            f({\n              type: 'attributeRemoved',\n              name: event.name\n            })\n          }\n        } else if (event.type === 'update' || event.type === 'add') {\n          f({\n            type: 'attributeChanged',\n            name: event.name,\n            value: event.value\n          })\n        } else {\n          throw new Error('Unexpected event')\n        }\n      }\n      this._eventListenerHandler.addEventListener(observeWrapper)\n      return observeWrapper\n    }\n\n    unobserve (f) {\n      this._eventListenerHandler.removeEventListener(f)\n    }\n    observeDeep (f) {\n      this._deepEventHandler.addEventListener(f)\n    }\n    unobserveDeep (f) {\n      this._deepEventHandler.removeEventListener(f)\n    }\n\n    _changed (transaction, op) {\n      if (this._domObserver != null) {\n        this._domObserverListener(this._domObserver.takeRecords())\n      }\n      if (op.parentSub !== undefined || op.targetParent !== undefined) {\n        Y.Map.typeDefinition['class'].prototype._changed.apply(this, arguments)\n      } else {\n        Y.Array.typeDefinition['class'].prototype._changed.apply(this, arguments)\n      }\n    }\n  }\n\n  Y.extend('XmlElement', new Y.utils.CustomTypeDefinition({\n    name: 'XmlElement',\n    class: YXmlElement,\n    struct: 'Xml',\n    parseArguments: function (arg) {\n      if (typeof arg === 'string') {\n        return [this, {\n          nodeName: arg.toUpperCase(),\n          dom: null\n        }]\n      } else if (arg.nodeType === _document.ELEMENT_NODE) {\n        return [this, {\n          nodeName: arg.nodeName,\n          dom: arg\n        }]\n      } else {\n        throw new Error('Y.Xml requires an argument which is a string!')\n      }\n    },\n    initType: function YXmlElementInitializer (os, model, init) {\n      // here begins the modified y-array init\n      var _content = []\n      var _types = []\n      Y.Struct.Xml.map.call(this, model, function (op) {\n        if (op.hasOwnProperty('opContent')) {\n          _content.push({\n            id: op.id,\n            type: op.opContent\n          })\n          _types.push(op.opContent)\n        } else {\n          op.content.forEach(function (c, i) {\n            _content.push({\n              id: [op.id[0], op.id[1] + i],\n              val: op.content[i]\n            })\n          })\n        }\n      })\n      for (var i = 0; i < _types.length; i++) {\n        let type = this.store.initType.call(this, _types[i], init)\n        type._parent = model.id\n      }\n      // here begins the modified y-map init\n      var contents = {}\n      var opContents = {}\n      var map = model.map\n      for (var name in map) {\n        var op = this.getOperation(map[name])\n        if (op.deleted) continue\n        if (op.opContent != null) {\n          opContents[name] = op.opContent\n          this.store.initType.call(this, op.opContent)\n        } else {\n          contents[name] = op.content[0]\n        }\n      }\n      return new YXmlElement(os, model, _content, contents, opContents, init != null ? init.dom : null)\n    },\n    createType: function YXmlElementCreator (os, model, args) {\n      return new YXmlElement(os, model, [], {}, {}, args.dom)\n    }\n  }))\n}\n","/* global Y, MutationObserver */\n\nimport yXmlText from './y-xml-text.js'\nimport yXmlFragment from './y-xml-fragment.js'\nimport yXmlElement from './y-xml-element.js'\n\nexport default function extendXml (Y, _document, _MutationObserver) {\n  if (_document == null && typeof document !== 'undefined') {\n    _document = document\n  }\n  if (typeof MutationObserver !== 'undefined') {\n    _MutationObserver = MutationObserver\n  } else {\n    console.warn('MutationObserver is not available. y-xml won\\'t listen to changes on the DOM')\n    _MutationObserver = null\n  }\n  yXmlElement(Y, _document, _MutationObserver)\n  yXmlText(Y, _document, _MutationObserver)\n  yXmlFragment(Y, _document, _MutationObserver)\n}\n\nif (typeof Y !== 'undefined') {\n  extendXml(Y)\n}\n"],"names":["diff_main","text1","text2","cursor_pos","DIFF_EQUAL","length","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","fix_cursor","DIFF_INSERT","DIFF_DELETE","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_bisect_","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","x1","k1_offset","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","j","best_common","prefixLength","suffixLength","hm1","hm2","diff_cleanupMerge","pointer","count_delete","count_insert","text_delete","text_insert","splice","pop","changes","cursor_normalize_diff","current_pos","next_pos","slice","split_pos","d_left","d_right","Error","norm","ndiffs","cursor_pointer","d_next","merge_tuples","suffix","start","left_d","right_d","fixPosition","event","pos","index","type","extendYXmlText","Y","_document","_MutationObserver","requestModules","then","YXmlText","os","_model","_content","args","content","insert","dom","_domObserver","_domObserverListener","_setDom","token","_mutualExcluse","_this","takeRecords","e","observe","selection","shouldUpdateSelection","anchorNode","anchorOffset","focusNode","focusOffset","getSelection","nodeValue","toString","setBaseAndExtent","this","_unbindFromDom","__yxml","diff","_this2","delete","characterData","createTextNode","map","c","val","join","split","transaction","op","disconnect","_eventListenerHandler","destroy","typeDefinition","extend","utils","CustomTypeDefinition","arg","nodeType","TEXT_NODE","model","init","Struct","List","call","hasOwnProperty","forEach","id","applyChangesFromDom","yxml","undeletedKnownChildren","prototype","childNodes","child","filter","undefined","childType","get","some","undel","len","expectedNode","findIndex","insertDomElements","extendYXmlFragment","YXmlFragment","nodes","values","v","getDom","nextDom","insertBefore","remove","XmlElement","class","apply","arguments","innerHTML","childList","_this3","getType","_types","opContent","store","initType","_parent","extendXmlElement","domToType","XmlText","ELEMENT_NODE","yarrayEventHandler","struct","compareIds","left","contents","bubbleEvent","inDeletionRange","delLength","target","ymapEventHandler","oldValue","key","parentSub","opContents","value","deleted","YXmlElement","arrayContent","_os","copyObject","nodeName","mapEventHandler","bind","arrayEventHandler","eventHandler","EventHandler","_deepEventHandler","EventListenerHandler","_mutualExclude","setAttribute","name","removeAttribute","node","toLowerCase","children","childId","doms","types","isArray","t","isTypeDefinition","Map","set","keys","obj","diffChildren","mutation","attributeName","getAttribute","_this5","attributes","attr","_bindToDom","createElement","attrs","getAttributes","appendChild","f","observeWrapper","addEventListener","removeEventListener","targetParent","_changed","CustomType","toUpperCase","Xml","getOperation","extendXml","document","MutationObserver","warn","INSERT","DELETE","EQUAL"],"mappings":"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"}